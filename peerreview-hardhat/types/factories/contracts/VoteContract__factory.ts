/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  VoteContract,
  VoteContractInterface,
} from "../../contracts/VoteContract";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "paperId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "upvotes",
        type: "uint32",
      },
    ],
    name: "Revealed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "paperId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "voter",
        type: "address",
      },
    ],
    name: "Voted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "paperId",
        type: "uint256",
      },
    ],
    name: "getUpvotes",
    outputs: [
      {
        internalType: "euint32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "paperId",
        type: "uint256",
      },
    ],
    name: "getVoters",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "paperId",
        type: "uint256",
      },
      {
        internalType: "externalEbool",
        name: "encUpvote",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "votePaper",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "voted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f5ffd5b5061018a6100ae604080516080810182525f808252602082018190529181018290526060810191909152506040805160808101825273687820221192c5b662b25367f70076a37bc79b6c815273848b0066793bcc60346da1f49049357399b8d595602082015273a02cda4ca3a71d7c46997716f4283aa851c2881291810191909152731364cbbf2cdf5032c47d8226a6f6fbd2afcdacac606082015290565b80517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970080546001600160a01b03199081166001600160a01b039384161790915560208301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497018054831691841691909117905560408301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497028054831691841691909117905560608301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497038054909216921691909117905550565b6108c3806101975f395ff3fe608060405234801561000f575f5ffd5b5060043610610064575f3560e01c806398f427021161004d57806398f42702146100e7578063da1f12ab14610114578063fcd223da1461011c575f5ffd5b80635277b4ae1461006857806386b646f2146100aa575b5f5ffd5b610095610076366004610726565b600160209081525f928352604080842090915290825290205460ff1681565b60405190151581526020015b60405180910390f35b6100d26100b836600461075f565b5f9081526020819052604090206001015463ffffffff1690565b60405163ffffffff90911681526020016100a1565b6101066100f536600461075f565b5f9081526020819052604090205490565b6040519081526020016100a1565b612711610106565b61012f61012a366004610776565b610131565b005b5f84815260016020908152604080832033845290915290205460ff161561019e5760405162461bcd60e51b815260206004820152600d60248201527f616c726561647920766f74656400000000000000000000000000000000000000604482015260640160405180910390fd5b5f6101de8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506102bd92505050565b5f8681526020819052604081209192506101f860016102d2565b90505f61020e84836102095f6102d2565b6102e4565b905061021d835f0154826102fa565b8355600180840180545f9061023990849063ffffffff166107f2565b92506101000a81548163ffffffff021916908363ffffffff160217905550610263835f0154610328565b505f888152600160208181526040808420338086529252808420805460ff1916909317909255905190918a917f030b0f8dcd86a031eddb071f91882edeac8173663ba775713b677b42b51be44b9190a35050505050505050565b5f6102c983835f610337565b90505b92915050565b5f6102cc8263ffffffff166004610457565b5f6102f0848484610514565b90505b9392505050565b5f8261030c576103095f6102d2565b92505b8161031d5761031a5f6102d2565b91505b6102c983835f6105bd565b5f610333823061069d565b5090565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497015460405163196d0b9b60e01b81525f917f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700916001600160a01b039091169063196d0b9b906103b090889033908990899060040161083a565b6020604051808303815f875af11580156103cc573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103f0919061088b565b8154604051630f8e573b60e21b8152600481018390523360248201529193506001600160a01b031690633e395cec906044015f604051808303815f87803b158015610439575f5ffd5b505af115801561044b573d5f5f3e3d5ffd5b50505050509392505050565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970154604051639cd07acb60e01b81525f917f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700916001600160a01b0390911690639cd07acb906104cc90879087906004016108a2565b6020604051808303815f875af11580156104e8573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061050c919061088b565b949350505050565b5f807f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497006001810154604051637702dcff60e01b81526004810188905260248101879052604481018690529192506001600160a01b031690637702dcff906064016020604051808303815f875af1158015610590573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105b4919061088b565b95945050505050565b5f5f82156105d05750600160f81b6105d3565b505f5b5f7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700600181015460405163022f65e760e31b815260048101899052602481018890527fff00000000000000000000000000000000000000000000000000000000000000851660448201529192506001600160a01b03169063117b2f38906064016020604051808303815f875af115801561066f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610693919061088b565b9695505050505050565b5f7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497008054604051635ca4b5b160e11b8152600481018690526001600160a01b03858116602483015292935091169063b9496b62906044015f604051808303815f87803b15801561070b575f5ffd5b505af115801561071d573d5f5f3e3d5ffd5b50505050505050565b5f5f60408385031215610737575f5ffd5b8235915060208301356001600160a01b0381168114610754575f5ffd5b809150509250929050565b5f6020828403121561076f575f5ffd5b5035919050565b5f5f5f5f60608587031215610789575f5ffd5b8435935060208501359250604085013567ffffffffffffffff8111156107ad575f5ffd5b8501601f810187136107bd575f5ffd5b803567ffffffffffffffff8111156107d3575f5ffd5b8760208284010111156107e4575f5ffd5b949793965060200194505050565b63ffffffff81811683821601908111156102cc57634e487b7160e01b5f52601160045260245ffd5b6054811061083657634e487b7160e01b5f52602160045260245ffd5b9052565b8481526001600160a01b0384166020820152608060408201525f8351806080840152806020860160a085015e5f60a0828501015260a0601f19601f8301168401019150506105b4606083018461081a565b5f6020828403121561089b575f5ffd5b5051919050565b828152604081016102f3602083018461081a56fea164736f6c634300081b000a";

type VoteContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VoteContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VoteContract__factory extends ContractFactory {
  constructor(...args: VoteContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      VoteContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): VoteContract__factory {
    return super.connect(runner) as VoteContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VoteContractInterface {
    return new Interface(_abi) as VoteContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): VoteContract {
    return new Contract(address, _abi, runner) as unknown as VoteContract;
  }
}
