/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  PaperRegistry,
  PaperRegistryInterface,
} from "../../contracts/PaperRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "paperId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "averageScore",
        type: "uint32",
      },
    ],
    name: "PaperAverageRevealed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "paperId",
        type: "uint256",
      },
    ],
    name: "PaperMarkedExcellent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "paperId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "author",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "ipfsCid",
        type: "string",
      },
    ],
    name: "PaperSubmitted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "paperId",
        type: "uint256",
      },
    ],
    name: "getPaper",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "author",
            type: "address",
          },
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "bytes32",
            name: "abstractHash",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "ipfsCid",
            type: "string",
          },
          {
            internalType: "string",
            name: "fieldTag",
            type: "string",
          },
          {
            internalType: "bool",
            name: "isReviewed",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isExcellent",
            type: "bool",
          },
          {
            internalType: "uint32",
            name: "averageScore",
            type: "uint32",
          },
        ],
        internalType: "struct PaperRegistry.Paper",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "paperId",
        type: "uint256",
      },
    ],
    name: "markExcellent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "paperId",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "averageScore",
        type: "uint32",
      },
    ],
    name: "setAverageScore",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "abstractHash",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "ipfsCid",
        type: "string",
      },
      {
        internalType: "string",
        name: "fieldTag",
        type: "string",
      },
    ],
    name: "submitPaper",
    outputs: [
      {
        internalType: "uint256",
        name: "paperId",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260015f55348015610013575f5ffd5b5061018e6100b2604080516080810182525f808252602082018190529181018290526060810191909152506040805160808101825273687820221192c5b662b25367f70076a37bc79b6c815273848b0066793bcc60346da1f49049357399b8d595602082015273a02cda4ca3a71d7c46997716f4283aa851c2881291810191909152731364cbbf2cdf5032c47d8226a6f6fbd2afcdacac606082015290565b80517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970080546001600160a01b03199081166001600160a01b039384161790915560208301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497018054831691841691909117905560408301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497028054831691841691909117905560608301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497038054909216921691909117905550565b610a548061019b5f395ff3fe608060405260043610610058575f3560e01c80635a0c2b43116100415780635a0c2b43146100b2578063bdd460e5146100d3578063da1f12ab146100f2575f5ffd5b806307993f041461005c57806310ef193b14610091575b5f5ffd5b348015610067575f5ffd5b5061007b610076366004610672565b610106565b60405161008891906106b7565b60405180910390f35b6100a461009f3660046107c4565b61038c565b604051908152602001610088565b3480156100bd575f5ffd5b506100d16100cc36600461086c565b6105bb565b005b3480156100de575f5ffd5b506100d16100ed366004610672565b61062b565b3480156100fd575f5ffd5b506127116100a4565b6101626040518061012001604052805f81526020015f6001600160a01b03168152602001606081526020015f815260200160608152602001606081526020015f151581526020015f151581526020015f63ffffffff1681525090565b5f8281526001602081815260409283902083516101208101855281548152928101546001600160a01b03169183019190915260028101805492939192918401916101ab906108a2565b80601f01602080910402602001604051908101604052809291908181526020018280546101d7906108a2565b80156102225780601f106101f957610100808354040283529160200191610222565b820191905f5260205f20905b81548152906001019060200180831161020557829003601f168201915b5050505050815260200160038201548152602001600482018054610245906108a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610271906108a2565b80156102bc5780601f10610293576101008083540402835291602001916102bc565b820191905f5260205f20905b81548152906001019060200180831161029f57829003601f168201915b505050505081526020016005820180546102d5906108a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610301906108a2565b801561034c5780601f106103235761010080835404028352916020019161034c565b820191905f5260205f20905b81548152906001019060200180831161032f57829003601f168201915b50505091835250506006919091015460ff808216151560208401526101008204161515604083015262010000900463ffffffff1660609091015292915050565b5f8054818061039a836108da565b919050559050604051806101200160405280828152602001336001600160a01b0316815260200189898080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250505090825250602080820189905260408051601f890183900483028101830182528881529201919088908890819084018382808284375f92019190915250505090825250604080516020601f8701819004810282018101909252858152918101919086908690819084018382808284375f920182905250938552505050602080830182905260408084018390526060909301829052848252600180825291839020845181559084015191810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909316929092179091559082015160028201906104e8908261095e565b506060820151600382015560808201516004820190610507908261095e565b5060a0820151600582019061051c908261095e565b5060c08201516006909101805460e08401516101009485015163ffffffff16620100000265ffffffff00001991151590950261ff00199415159490941661ffff19909216919091179290921791909116919091179055604051339082907fb3ea4b5389ebdfde0fd6521ba6b05a830220cc72bedebcd0d0d44b1d916c21c4906105a89089908990610a19565b60405180910390a3979650505050505050565b5f82815260016020818152604092839020600601805465ffffffff00ff19166201000063ffffffff871690810260ff1916919091179093179055915190815283917ffd72fa5c2c24a58e1484a9082d7f58b4e53e0b18897e8fd09817b2efbf7276a5910160405180910390a25050565b5f81815260016020526040808220600601805461ff0019166101001790555182917fcbe363d79360d44de44c9114a8687600428271cda53feb57c420d56dae028d0491a250565b5f60208284031215610682575f5ffd5b5035919050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b60208152815160208201525f60208301516106dd60408401826001600160a01b03169052565b50604083015161012060608401526106f9610140840182610689565b9050606084015160808401526080840151601f198483030160a08501526107208282610689565b91505060a0840151601f198483030160c085015261073e8282610689565b91505060c084015161075460e085018215159052565b5060e08401518015156101008501525061010084015163ffffffff8116610120850152509392505050565b5f5f83601f84011261078f575f5ffd5b50813567ffffffffffffffff8111156107a6575f5ffd5b6020830191508360208285010111156107bd575f5ffd5b9250929050565b5f5f5f5f5f5f5f6080888a0312156107da575f5ffd5b873567ffffffffffffffff8111156107f0575f5ffd5b6107fc8a828b0161077f565b90985096505060208801359450604088013567ffffffffffffffff811115610822575f5ffd5b61082e8a828b0161077f565b909550935050606088013567ffffffffffffffff81111561084d575f5ffd5b6108598a828b0161077f565b989b979a50959850939692959293505050565b5f5f6040838503121561087d575f5ffd5b82359150602083013563ffffffff81168114610897575f5ffd5b809150509250929050565b600181811c908216806108b657607f821691505b6020821081036108d457634e487b7160e01b5f52602260045260245ffd5b50919050565b5f600182016108f757634e487b7160e01b5f52601160045260245ffd5b5060010190565b634e487b7160e01b5f52604160045260245ffd5b601f82111561095957805f5260205f20601f840160051c810160208510156109375750805b601f840160051c820191505b81811015610956575f8155600101610943565b50505b505050565b815167ffffffffffffffff811115610978576109786108fe565b61098c8161098684546108a2565b84610912565b6020601f8211600181146109be575f83156109a75750848201515b5f19600385901b1c1916600184901b178455610956565b5f84815260208120601f198516915b828110156109ed57878501518255602094850194600190920191016109cd565b5084821015610a0a57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b60208152816020820152818360408301375f818301604090810191909152601f909201601f1916010191905056fea164736f6c634300081b000a";

type PaperRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PaperRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PaperRegistry__factory extends ContractFactory {
  constructor(...args: PaperRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      PaperRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PaperRegistry__factory {
    return super.connect(runner) as PaperRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PaperRegistryInterface {
    return new Interface(_abi) as PaperRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PaperRegistry {
    return new Contract(address, _abi, runner) as unknown as PaperRegistry;
  }
}
