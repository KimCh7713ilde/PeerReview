/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ReviewManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAverage"
      | "getCount"
      | "protocolId"
      | "reviews"
      | "submitReview"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AverageRevealed" | "ReviewSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getAverage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviews",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitReview",
    values: [BigNumberish, BytesLike, BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "getAverage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reviews", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitReview",
    data: BytesLike
  ): Result;
}

export namespace AverageRevealedEvent {
  export type InputTuple = [paperId: BigNumberish, clearAvg: BigNumberish];
  export type OutputTuple = [paperId: bigint, clearAvg: bigint];
  export interface OutputObject {
    paperId: bigint;
    clearAvg: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReviewSubmittedEvent {
  export type InputTuple = [
    paperId: BigNumberish,
    reviewer: AddressLike,
    encCommentCid: string
  ];
  export type OutputTuple = [
    paperId: bigint,
    reviewer: string,
    encCommentCid: string
  ];
  export interface OutputObject {
    paperId: bigint;
    reviewer: string;
    encCommentCid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReviewManager extends BaseContract {
  connect(runner?: ContractRunner | null): ReviewManager;
  waitForDeployment(): Promise<this>;

  interface: ReviewManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAverage: TypedContractMethod<
    [paperId: BigNumberish],
    [string],
    "nonpayable"
  >;

  getCount: TypedContractMethod<[paperId: BigNumberish], [bigint], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  reviews: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[boolean, string] & { reviewed: boolean; encCommentCid: string }],
    "view"
  >;

  submitReview: TypedContractMethod<
    [
      paperId: BigNumberish,
      encryptedScore: BytesLike,
      proof: BytesLike,
      encCommentCid: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAverage"
  ): TypedContractMethod<[paperId: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getCount"
  ): TypedContractMethod<[paperId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reviews"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[boolean, string] & { reviewed: boolean; encCommentCid: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitReview"
  ): TypedContractMethod<
    [
      paperId: BigNumberish,
      encryptedScore: BytesLike,
      proof: BytesLike,
      encCommentCid: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AverageRevealed"
  ): TypedContractEvent<
    AverageRevealedEvent.InputTuple,
    AverageRevealedEvent.OutputTuple,
    AverageRevealedEvent.OutputObject
  >;
  getEvent(
    key: "ReviewSubmitted"
  ): TypedContractEvent<
    ReviewSubmittedEvent.InputTuple,
    ReviewSubmittedEvent.OutputTuple,
    ReviewSubmittedEvent.OutputObject
  >;

  filters: {
    "AverageRevealed(uint256,uint32)": TypedContractEvent<
      AverageRevealedEvent.InputTuple,
      AverageRevealedEvent.OutputTuple,
      AverageRevealedEvent.OutputObject
    >;
    AverageRevealed: TypedContractEvent<
      AverageRevealedEvent.InputTuple,
      AverageRevealedEvent.OutputTuple,
      AverageRevealedEvent.OutputObject
    >;

    "ReviewSubmitted(uint256,address,string)": TypedContractEvent<
      ReviewSubmittedEvent.InputTuple,
      ReviewSubmittedEvent.OutputTuple,
      ReviewSubmittedEvent.OutputObject
    >;
    ReviewSubmitted: TypedContractEvent<
      ReviewSubmittedEvent.InputTuple,
      ReviewSubmittedEvent.OutputTuple,
      ReviewSubmittedEvent.OutputObject
    >;
  };
}
