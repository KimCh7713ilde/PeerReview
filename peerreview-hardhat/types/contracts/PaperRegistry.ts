/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PaperRegistry {
  export type PaperStruct = {
    id: BigNumberish;
    author: AddressLike;
    title: string;
    abstractHash: BytesLike;
    ipfsCid: string;
    fieldTag: string;
    isReviewed: boolean;
    isExcellent: boolean;
    averageScore: BigNumberish;
  };

  export type PaperStructOutput = [
    id: bigint,
    author: string,
    title: string,
    abstractHash: string,
    ipfsCid: string,
    fieldTag: string,
    isReviewed: boolean,
    isExcellent: boolean,
    averageScore: bigint
  ] & {
    id: bigint;
    author: string;
    title: string;
    abstractHash: string;
    ipfsCid: string;
    fieldTag: string;
    isReviewed: boolean;
    isExcellent: boolean;
    averageScore: bigint;
  };
}

export interface PaperRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getPaper"
      | "markExcellent"
      | "protocolId"
      | "setAverageScore"
      | "submitPaper"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PaperAverageRevealed"
      | "PaperMarkedExcellent"
      | "PaperSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getPaper",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markExcellent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAverageScore",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitPaper",
    values: [string, BytesLike, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "getPaper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "markExcellent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAverageScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitPaper",
    data: BytesLike
  ): Result;
}

export namespace PaperAverageRevealedEvent {
  export type InputTuple = [paperId: BigNumberish, averageScore: BigNumberish];
  export type OutputTuple = [paperId: bigint, averageScore: bigint];
  export interface OutputObject {
    paperId: bigint;
    averageScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaperMarkedExcellentEvent {
  export type InputTuple = [paperId: BigNumberish];
  export type OutputTuple = [paperId: bigint];
  export interface OutputObject {
    paperId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaperSubmittedEvent {
  export type InputTuple = [
    paperId: BigNumberish,
    author: AddressLike,
    ipfsCid: string
  ];
  export type OutputTuple = [paperId: bigint, author: string, ipfsCid: string];
  export interface OutputObject {
    paperId: bigint;
    author: string;
    ipfsCid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PaperRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): PaperRegistry;
  waitForDeployment(): Promise<this>;

  interface: PaperRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPaper: TypedContractMethod<
    [paperId: BigNumberish],
    [PaperRegistry.PaperStructOutput],
    "view"
  >;

  markExcellent: TypedContractMethod<
    [paperId: BigNumberish],
    [void],
    "nonpayable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  setAverageScore: TypedContractMethod<
    [paperId: BigNumberish, averageScore: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitPaper: TypedContractMethod<
    [title: string, abstractHash: BytesLike, ipfsCid: string, fieldTag: string],
    [bigint],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPaper"
  ): TypedContractMethod<
    [paperId: BigNumberish],
    [PaperRegistry.PaperStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "markExcellent"
  ): TypedContractMethod<[paperId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setAverageScore"
  ): TypedContractMethod<
    [paperId: BigNumberish, averageScore: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitPaper"
  ): TypedContractMethod<
    [title: string, abstractHash: BytesLike, ipfsCid: string, fieldTag: string],
    [bigint],
    "payable"
  >;

  getEvent(
    key: "PaperAverageRevealed"
  ): TypedContractEvent<
    PaperAverageRevealedEvent.InputTuple,
    PaperAverageRevealedEvent.OutputTuple,
    PaperAverageRevealedEvent.OutputObject
  >;
  getEvent(
    key: "PaperMarkedExcellent"
  ): TypedContractEvent<
    PaperMarkedExcellentEvent.InputTuple,
    PaperMarkedExcellentEvent.OutputTuple,
    PaperMarkedExcellentEvent.OutputObject
  >;
  getEvent(
    key: "PaperSubmitted"
  ): TypedContractEvent<
    PaperSubmittedEvent.InputTuple,
    PaperSubmittedEvent.OutputTuple,
    PaperSubmittedEvent.OutputObject
  >;

  filters: {
    "PaperAverageRevealed(uint256,uint32)": TypedContractEvent<
      PaperAverageRevealedEvent.InputTuple,
      PaperAverageRevealedEvent.OutputTuple,
      PaperAverageRevealedEvent.OutputObject
    >;
    PaperAverageRevealed: TypedContractEvent<
      PaperAverageRevealedEvent.InputTuple,
      PaperAverageRevealedEvent.OutputTuple,
      PaperAverageRevealedEvent.OutputObject
    >;

    "PaperMarkedExcellent(uint256)": TypedContractEvent<
      PaperMarkedExcellentEvent.InputTuple,
      PaperMarkedExcellentEvent.OutputTuple,
      PaperMarkedExcellentEvent.OutputObject
    >;
    PaperMarkedExcellent: TypedContractEvent<
      PaperMarkedExcellentEvent.InputTuple,
      PaperMarkedExcellentEvent.OutputTuple,
      PaperMarkedExcellentEvent.OutputObject
    >;

    "PaperSubmitted(uint256,address,string)": TypedContractEvent<
      PaperSubmittedEvent.InputTuple,
      PaperSubmittedEvent.OutputTuple,
      PaperSubmittedEvent.OutputObject
    >;
    PaperSubmitted: TypedContractEvent<
      PaperSubmittedEvent.InputTuple,
      PaperSubmittedEvent.OutputTuple,
      PaperSubmittedEvent.OutputObject
    >;
  };
}
