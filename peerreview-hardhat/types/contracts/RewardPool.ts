/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RewardPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addPaperFee"
      | "balances"
      | "distributeReward"
      | "distributed"
      | "paperFees"
      | "paperReviewers"
      | "recordReviewer"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Distributed"
      | "Funded"
      | "PaperFeeAdded"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addPaperFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "paperFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "paperReviewers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordReviewer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addPaperFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paperFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paperReviewers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordReviewer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DistributedEvent {
  export type InputTuple = [paperId: BigNumberish, perReviewer: BigNumberish];
  export type OutputTuple = [paperId: bigint, perReviewer: bigint];
  export interface OutputObject {
    paperId: bigint;
    perReviewer: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundedEvent {
  export type InputTuple = [from: AddressLike, value: BigNumberish];
  export type OutputTuple = [from: string, value: bigint];
  export interface OutputObject {
    from: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaperFeeAddedEvent {
  export type InputTuple = [paperId: BigNumberish, value: BigNumberish];
  export type OutputTuple = [paperId: bigint, value: bigint];
  export interface OutputObject {
    paperId: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RewardPool extends BaseContract {
  connect(runner?: ContractRunner | null): RewardPool;
  waitForDeployment(): Promise<this>;

  interface: RewardPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addPaperFee: TypedContractMethod<[paperId: BigNumberish], [void], "payable">;

  balances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  distributeReward: TypedContractMethod<
    [paperId: BigNumberish],
    [void],
    "nonpayable"
  >;

  distributed: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  paperFees: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  paperReviewers: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  recordReviewer: TypedContractMethod<
    [paperId: BigNumberish, reviewer: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addPaperFee"
  ): TypedContractMethod<[paperId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "distributeReward"
  ): TypedContractMethod<[paperId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributed"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "paperFees"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "paperReviewers"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "recordReviewer"
  ): TypedContractMethod<
    [paperId: BigNumberish, reviewer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Distributed"
  ): TypedContractEvent<
    DistributedEvent.InputTuple,
    DistributedEvent.OutputTuple,
    DistributedEvent.OutputObject
  >;
  getEvent(
    key: "Funded"
  ): TypedContractEvent<
    FundedEvent.InputTuple,
    FundedEvent.OutputTuple,
    FundedEvent.OutputObject
  >;
  getEvent(
    key: "PaperFeeAdded"
  ): TypedContractEvent<
    PaperFeeAddedEvent.InputTuple,
    PaperFeeAddedEvent.OutputTuple,
    PaperFeeAddedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Distributed(uint256,uint256)": TypedContractEvent<
      DistributedEvent.InputTuple,
      DistributedEvent.OutputTuple,
      DistributedEvent.OutputObject
    >;
    Distributed: TypedContractEvent<
      DistributedEvent.InputTuple,
      DistributedEvent.OutputTuple,
      DistributedEvent.OutputObject
    >;

    "Funded(address,uint256)": TypedContractEvent<
      FundedEvent.InputTuple,
      FundedEvent.OutputTuple,
      FundedEvent.OutputObject
    >;
    Funded: TypedContractEvent<
      FundedEvent.InputTuple,
      FundedEvent.OutputTuple,
      FundedEvent.OutputObject
    >;

    "PaperFeeAdded(uint256,uint256)": TypedContractEvent<
      PaperFeeAddedEvent.InputTuple,
      PaperFeeAddedEvent.OutputTuple,
      PaperFeeAddedEvent.OutputObject
    >;
    PaperFeeAdded: TypedContractEvent<
      PaperFeeAddedEvent.InputTuple,
      PaperFeeAddedEvent.OutputTuple,
      PaperFeeAddedEvent.OutputObject
    >;

    "Withdraw(address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
